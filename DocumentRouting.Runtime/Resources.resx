<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorStopping" xml:space="preserve">
    <value>Error happened in Stopping the Service</value>
    <comment>Error message when stopping the service.</comment>
  </data>
  <data name="FriendlyPrinterNameFormat" xml:space="preserve">
    <value>{0} on {1}</value>
    <comment>Format string for a netowrk printer.</comment>
  </data>
  <data name="InvalidPrinter" xml:space="preserve">
    <value>Printer Name {0} is not valid.</value>
    <comment>Invalid printer error message.</comment>
  </data>
  <data name="NoEmfImage" xml:space="preserve">
    <value>No image produced.</value>
    <comment>Error message when no images are found.</comment>
  </data>
  <data name="NoPageSettings" xml:space="preserve">
    <value>PageSettings object sent to printer cannot be null or empty.</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="NoPageSizes" xml:space="preserve">
    <value>Page sizes cannot be empty.</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="NoPrinterName" xml:space="preserve">
    <value>No Printer name supplied.</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="PageSettingsNotNull" xml:space="preserve">
    <value>PageSettingsRoot cannot be null.</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="PageSizesProvidedDoNotMatchSizeOfReport" xml:space="preserve">
    <value>The total of the page sizes provided, {0}, does not match the byte size of the report: {1}</value>
    <comment>Printing error message.</comment>
  </data>
  <data name="ParameterMustNotBeNullOrEmpty" xml:space="preserve">
    <value>Parameter '{0}' must not be null or empty.</value>
    <comment>Public API parameter error message.</comment>
  </data>
  <data name="PointNotSpecified" xml:space="preserve">
    <value>Not a valid point structure for drawing image.</value>
    <comment>Error message when printer is not supplied.</comment>
  </data>
  <data name="PrinterIsNotAvailable" xml:space="preserve">
    <value>Printer is not available: {0}.</value>
    <comment>Error message when a printer is not found.</comment>
  </data>
  <data name="PrintFailureMessage" xml:space="preserve">
    <value>Report failed to be sent to the printer.</value>
    <comment>Failure error message.</comment>
  </data>
  <data name="PrintSuccessMessage" xml:space="preserve">
    <value>Report was successfully sent to the printer.</value>
    <comment>Successful message</comment>
  </data>
  <data name="ReportPageSizesInvalid" xml:space="preserve">
    <value>The expected size of the file to be printed is {0} bytes, but the actual size is {1} bytes.</value>
    <comment>Error message stating that report page sizes don't match.</comment>
  </data>
  <data name="PageSettingsFormatException" xml:space="preserve">
    <value>PageSettings format is not correct</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="PrinterNameMustNotBeNull" xml:space="preserve">
    <value>PageSettings.PrinterName of parameter {0} must not be null.</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="PrinterSettingsMustNotBeNull" xml:space="preserve">
    <value>PageSettings of parameter {0} must not be null.</value>
    <comment>Parameter error message.</comment>
  </data>
  <data name="UnableToInitializePrinterSettings" xml:space="preserve">
    <value>Unable to initialize the printer using the printer settings supplied.</value>
    <comment>Printer initialization error.</comment>
  </data>
  <data name="NoDocumentContract" xml:space="preserve">
    <value>DocumentContract cannot be null or empty.</value>
    <comment>Error received when no document contract is found.</comment>
  </data>
  <data name="UnsupportedTargetType" xml:space="preserve">
    <value>The TargetType property of the DocumentContract object is not supported.</value>
    <comment>Not supported exception.</comment>
  </data>
  <data name="DeleteDocumentContractFromBlobStorageTaskStart" xml:space="preserve">
    <value>Deleting the document contract from blob storage task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="DeleteDocumentContractFromBlobStorageTaskStop" xml:space="preserve">
    <value>Deleting the document contract from blob storage task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="DownloadDocumentContractFromBlobStorageTaskStart" xml:space="preserve">
    <value>Download document contract from blob storage task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="DownloadDocumentContractFromBlobStorageTaskStop" xml:space="preserve">
    <value>Download document contract from blob storage task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="NoMetafilesToPrint" xml:space="preserve">
    <value>There are no metafiles to send to the printer.</value>
    <comment>Error message when no Metafiles are supplied.</comment>
  </data>
  <data name="SendMetafilePageToPrinterTaskStart" xml:space="preserve">
    <value>Send Metafile page to printer task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SendMetafilePageToPrinterTaskStop" xml:space="preserve">
    <value>Send Metafile page to printer task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SendMetafileToPrinterTaskStart" xml:space="preserve">
    <value>Send metafile document to printer task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SendMetafileToPrinterTaskStop" xml:space="preserve">
    <value>Send metafile document to printer task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SendToZebraPrinterTaskStart" xml:space="preserve">
    <value>Send to Zebra printer task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SendToZebraPrinterTaskStop" xml:space="preserve">
    <value>Send to Zebra printer task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SplitIntoMetafilePagesTaskStart" xml:space="preserve">
    <value>Split byte array into Metafile pages task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SplitIntoMetafilePagesTaskStop" xml:space="preserve">
    <value>Split byte array into Metafile pages task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="ProcessPageSettingsTaskStart" xml:space="preserve">
    <value>Process page settings tast start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="ProcessPageSettingsTaskStop" xml:space="preserve">
    <value>Process page settings tast stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="TransferPageSettingsTastStart" xml:space="preserve">
    <value>Transferring the page settings for to printer specific page settings task start.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="TransferPageSettingsTastStop" xml:space="preserve">
    <value>Transferring the page settings for to printer specific page settings task stop.</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="TaskStartFormatString" xml:space="preserve">
    <value>Task {0} Start</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="TaskStopFormatString" xml:space="preserve">
    <value>Task {0} Stop</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="PrintingDocument" xml:space="preserve">
    <value>Printing document {0}.</value>
    <comment>Printing status message.</comment>
  </data>
  <data name="PrintingDocumentFailed" xml:space="preserve">
    <value>Printing document {0} failed.</value>
    <comment>Printing status message.</comment>
  </data>
  <data name="PrintingDocumentSucceeded" xml:space="preserve">
    <value>Printing document {0} succeeded.</value>
    <comment>Printing status message.</comment>
  </data>
  <data name="DocumentRoutingAuthenticateTask" xml:space="preserve">
    <value>Document Routing authenticate {0}</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="DocumentRoutingDocumentRouteTask" xml:space="preserve">
    <value>Document Routing: route document {0}</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="SendDocumentContractToPrinterTask" xml:space="preserve">
    <value>Send document contract to printer ask {0}</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="TaskStart" xml:space="preserve">
    <value>Start</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="TaskStop" xml:space="preserve">
    <value>Stop</value>
    <comment>Task start / stop message.</comment>
  </data>
  <data name="ApplicationExceptionInMethod" xml:space="preserve">
    <value>An application exception occurred in method {0}.</value>
    <comment>Instrumentation error message.</comment>
  </data>
  <data name="ArgumentException" xml:space="preserve">
    <value>Argument {0} : {1}</value>
    <comment>Instrumentation error message.</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found: {0}</value>
    <comment>Instrumentation error message.</comment>
  </data>
  <data name="UnsupportedDocumentContract" xml:space="preserve">
    <value>The DocumentContract object supplied is not supported.</value>
    <comment>Instrumentation error message.</comment>
  </data>
  <data name="UnableToAddUpdateConfigSetting" xml:space="preserve">
    <value>Unable to add or update configuration setting {0} to value {1}. Ensure you have read/write access to path: {0}</value>
    <comment>Settings add /  update error</comment>
  </data>
  <data name="UnableToLoadSettings" xml:space="preserve">
    <value>Unable to load application settings. Ensure you have read/write access to path: {0}</value>
    <comment>Settings load error</comment>
  </data>
  <data name="AddStatusMessage" xml:space="preserve">
    <value>Adding the status task {0}.</value>
  </data>
  <data name="NotAvailableMessage" xml:space="preserve">
    <value>Not available</value>
  </data>
  <data name="UpdatingStatusMessage" xml:space="preserve">
    <value>Updating the status task to {0}{1}.</value>
  </data>
  <data name="SizeFDivideByZero" xml:space="preserve">
    <value>The supplied SizeF object has a width or height that is 0.0f.</value>
  </data>
  <data name="XmlDeclarationNotFound" xml:space="preserve">
    <value>The XML declaration is not found.</value>
  </data>
  <data name="MicrosoftXpsDocumentWriterPrinterName" xml:space="preserve">
    <value>Microsoft XPS Document Writer</value>
    <comment>Name of the Microsoft XPS Document Writer printer</comment>
  </data>
  <data name="SendToOneNotePrinterName" xml:space="preserve">
    <value>Send To OneNote</value>
    <comment>Name of the Send To OneNote printer</comment>
  </data>
  <data name="PrinterNotInInstalledPrintersList" xml:space="preserve">
    <value>The list of installed printers does not contain {0}.</value>
  </data>
  <data name="AdobeAcrobatNotInstalled" xml:space="preserve">
    <value>Adobe Acrobat Reader DC is not installed.</value>
    <comment>Adobe Acrobat reader not installed error message.</comment>
  </data>
  <data name="MicrosoftPrintToPDFPrinterName" xml:space="preserve">
    <value>Microsoft Print to PDF</value>
  </data>
  <data name="PrinterNotInInstalledPrintersListRetry" xml:space="preserve">
    <value>The list of installed printers does not contain {0}. Retrying...</value>
  </data>
</root>